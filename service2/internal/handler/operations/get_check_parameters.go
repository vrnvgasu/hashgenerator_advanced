// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCheckParams creates a new GetCheckParams object
//
// There are no default values defined in the spec.
func NewGetCheckParams() GetCheckParams {

	return GetCheckParams{}
}

// GetCheckParams contains all the bound params for the get check operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetCheck
type GetCheckParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Get hash by this id
	  Required: true
	  In: query
	*/
	Ids []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCheckParams() beforehand.
func (o *GetCheckParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIds binds and validates array parameter Ids from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetCheckParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ids", "query", rawData)
	}
	var qvIds string
	if len(rawData) > 0 {
		qvIds = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	idsIC := swag.SplitByFormat(qvIds, "")
	if len(idsIC) == 0 {
		return errors.Required("ids", "query", idsIC)
	}

	var idsIR []string
	for _, idsIV := range idsIC {
		idsI := idsIV

		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR

	return nil
}
